## O que √© Git? :woman_technologist:

**Git** √© um sistema de controle de vers√£o open-source, ou seja, gratuito. Ele √© utilizado para a cria√ß√£o de um hist√≥rico de altera√ß√µes em c√≥digo-fonte de projetos de desenvolvimento de software. Foi desenvolvido por **Linus Torvalds**, o criador do sistema operacional Linux.

- Por meio de sua utiliza√ß√£o, podemos saber quais foram as altera√ß√µes realizadas, quem fez cada uma das altera√ß√µes e baixar essas mudan√ßas em nossa m√°quina. Se necess√°rio, revert√™-las para uma vers√£o anterior.



## O que √© GitHub?:woman_technologist:

O **Github** √© um reposit√≥rio remoto, criado como um servi√ßo online de hospedagem de reposit√≥rios do **Git**.

Funciona como um servidor que agrega todas as modifica√ß√µes realizadas por cada uma das pessoas envolvidas em um projeto, unificando as diferentes vers√µes de c√≥digo e seus hist√≥ricos, permitindo compartilhamento entre as equipes.

- Al√©m disso, o GitHub tamb√©m conta com v√°rias integra√ß√µes com outros servi√ßos online, permitindo o deploy autom√°tico de aplica√ß√£o. Assim, garante a integra√ß√£o cont√≠nua e facilita o desenvolvimento.

**Vamos come√ßar por alguns comandos b√°sicos no Git**.:woman_technologist:



- **Markdown**

Markdown √© uma linguagem simples de marca√ß√£o, √© frequentemente usado para formatar arquivos README, para escrever mensagens em f√≥runs de discuss√£o online e para criar rich text usando um editor de texto simples.

- Exemplo: 
-  #T√≠tulo N√≠vel 1.                    
- ##T√≠tulo N√≠vel 2.
- ##T√≠tulo N√≠vel 3.

Basicamente, ele marca altera√ß√µes nos textos (subt√≠tulos, negrito, it√°lico etc) apenas com os s√≠mbolos do teclado, sem usar teclas de atalho, menus, selecionando o texto e sem aquele visual complexo - para os que n√£o est√£o acostumados - de HTML.

- **Comandos **:

- **Git Status**
  Para come√ßar, iremos criar um atalho para o comando git status, cujo objetivo √© exibir as condi√ß√µes do diret√≥rio de trabalho e da √°rea de staging.

  üìåExemplo: git status

- **Git add**
  Quando criamos, modificamos ou exclu√≠mos um arquivo, essas altera√ß√µes ocorrer√£o em nosso ambiente local e n√£o ser√£o inclu√≠das no pr√≥ximo commit (a menos que alteremos as configura√ß√µes).

  üìåExemplo: git add "Arquivo"

- **Git commit**
   Esse comando visa definir um ponto de verifica√ß√£o no processo de desenvolvimento, para o qual voc√™ pode voltar mais tarde, se necess√°rio.

  üìåExemplo: git commit -m "mensagem explicando a mudan√ßa no c√≥digo"

- **Git push**
  Ap√≥s confirmar as altera√ß√µes, a pr√≥xima coisa que voc√™ deseja fazer √© enviar as altera√ß√µes para o servidor remoto usando o comando git push.

  üìåExemplo: git push <remote> <nome-do-branch>

- **Git pull**
  O git pull √© usado para obter atualiza√ß√µes do reposit√≥rio remoto. 

  üìåExemplo: git pull <remote>

- **Git revert**
  Existem v√°rias maneiras de desfazer nossas altera√ß√µes local ou remotamente (dependendo da necessidade).

  üìåExemplo: git revert 'n√∫mero do hash'